openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Resource Manager"
  description: |
    This is the specification of the API for the Apollo Resource Manager. The api provides different routes to signup/login, manage resources and functions, get resources based
    on Service Level Objectives (SLOs) and automatically deploy and terminate resources. Resource can be of type cloud, serverless and vm. Note: the API is not entirely fixed and may
    be changed in the future to support additional types of resources.
    Most routes of the API implement CRUD (Create, Read, Update, Delete) operations.
  license:
    name: TODO

servers:
  - url: localhost:8080/api
    description: Local Dev Server
paths:
  /accounts:
    get:
      description: Return details about the currently logged in user account
      operationId: getAccount
      security:
        - bearerAuth: []
      tags:
        - accounts
      responses:
        200:
          description: Successful pull of the user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    patch:
      description: Change the password of the currently logged in user account
      operationId: changePassword
      security:
        - bearerAuth: []
      tags:
        - accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 2
              additionalProperties: false
              properties:
                old_password:
                  type: string
                  example: "old-password!"
                new_password:
                  type: string
                  example: "new-password!"
      responses:
        204:
          description: Successful update of an accounts password
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /accounts/signup:
    post:
      description: Registers a new user account
      operationId: signUp
      tags:
        - accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              additionalProperties: false
              properties:
                username:
                  description: Only lower case letters, digits or underscore are allowed characters
                  type: string
                  example: user1
                  minLength: 4
                  maxLength: 32
                password:
                  description: At least one digit, one lower case letter, one upper case letter, one special character have to be present. No white spaces are allowed.
                  type: string
                  example: password1234!?
                  minLength: 8
                  maxLength: 512
      responses:
        201:
          description: Successful registration of a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /accounts/login:
    post:
      description: Login a user account
      operationId: login
      tags:
        - accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              additionalProperties: false
              properties:
                username:
                  type: string
                  example: johndoe
                  minLength: 4
                  maxLength: 32
                password:
                  type: string
                  example: password1234!?
                  minLength: 8
                  maxLength: 512
      responses:
        201:
          description: Successful registration of a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /resources/{id}:
    get:
      description: Return details about a resource managed by the resource manager
      operationId: getResource
      security:
        - bearerAuth: []
      tags:
        - resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      description: DEPRECATED. Updates a resource
      operationId: updateResource
      security:
        - bearerAuth: []
      tags:
        - resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                resource_type:
                  type: object
                  required:
                    - type_id
                  additionalProperties: false
                  properties:
                    type_id:
                      type: integer
                      format: int64
                      example: 1
                is_self_managed:
                  type: boolean
                  example: false
      responses:
        204:
          description: Successful update of a resource
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a resource
      operationId: deleteResource
      security:
        - bearerAuth: []
      tags:
        - resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a resource
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /resources:
    get:
      description: Return details about all resources managed by the resource manager
      operationId: listResources
      security:
        - bearerAuth: []
      tags:
        - resources
      responses:
        200:
          description: Successful pull of all resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Registers a new resource
      operationId: createResource
      security:
        - bearerAuth: []
      tags:
        - resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resource_type
              additionalProperties: false
              properties:
                resource_type:
                  type: object
                  required:
                    - type_id
                  additionalProperties: false
                  properties:
                    type_id:
                      type: integer
                      format: int64
                      example: 1
                is_self_managed:
                  type: boolean
                  example: false
                region:
                  type: object
                  required:
                    - region_id
                  additionalProperties: false
                  properties:
                    region_id:
                      type: integer
                      format: int64
                      example: 1
      responses:
        201:
          description: Successful registration of a new resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /resources/{id}/metrics:
    get:
      description: Return all metrics that are linked to an existing resource identified by id
      operationId: listResourceMetrics
      security:
        - bearerAuth: []
      tags:
        - resources/metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of all metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Metric"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Adds multiple metrics to an existing resource
      operationId: addResourceMetrics
      security:
        - bearerAuth: []
      tags:
        - resources/metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                type: object
                required:
                  - metricId
                additionalProperties: false
                properties:
                  metricId:
                    type: integer
                    format: int64
                    example: 1
                  value:
                    description: the value type has to be equal to the type that is set for the metric
                    oneOf:
                      - type: number
                        example: 4
                      - type: string
                        example: "ubuntu"
                      - type: boolean
                        example: true
      responses:
        204:
          description: Successfully added metrics to existing resource
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /resources/{resourceId}/metrics/{metricId}:
    patch:
      description: Updates the value of a resource's metric
      operationId: updateMetricValue
      security:
        - bearerAuth: []
      tags:
        - resources/metrics
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: metricId
          in: path
          description: ID of the metric entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              additionalProperties: false
              properties:
                value:
                  description: the value type has to be equal to the type that is set for the metric
                  oneOf:
                    - type: number
                      example: 4
                    - type: string
                      example: "ubuntu"
                    - type: boolean
                      example: true
      responses:
        204:
          description: Successful update of metric value
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a resource metric
      operationId: deleteResourceMetric
      security:
        - bearerAuth: []
      tags:
        - resources/metrics
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: metricId
          in: path
          description: ID of the metric entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        204:
          description: Successful deletion of a metric
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"



  /resources/slo:
    post:
      description: Return all resources that conform to the given service level objectives
      operationId: listResourcesBySLOs
      security:
        - bearerAuth: []
      tags:
        - resourcesBySLOs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                slos:
                  $ref: "#/components/schemas/Slos"
      responses:
        200:
          description: Successful retrieval of resources conforming to the given service level objectives
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /ensembles/{id}:
    get:
      description: Returns details about an ensemble managed by the resource manager
      operationId: getEnsemble
      security:
        - bearerAuth: []
      tags:
        - ensembles
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of an ensemble
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ensemble"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes an ensemble
      operationId: deleteEnsemble
      security:
        - bearerAuth: []
      tags:
        - ensembles
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of an ensemble
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /ensembles/{id}/validate:
    get:
      description: Validate if all resources from an ensemble fulfill its service level objectives
      operationId: validateEnsemble
      security:
        - bearerAuth: [ ]
      tags:
        - ensembles
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful validation of all resources of an ensemble
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    resource_id:
                      type: integer
                      format: int64
                      example: 1
                    is_valid:
                      type: boolean
                      example: true
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /ensembles:
    get:
      description: Returns details about all ensembles managed by the resource manager
      operationId: listEnsembles
      security:
        - bearerAuth: []
      tags:
        - ensembles
      responses:
        200:
          description: Successful pull of all ensembles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ensemble"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Registers a new ensemble
      operationId: createEnsemble
      security:
        - bearerAuth: []
      tags:
        - ensembles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slos
                - resources
              additionalProperties: false
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 64
                  example: my-ensemble
                slos:
                  $ref: "#/components/schemas/Slos"
                resources:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - resource_id
                    additionalProperties: false
                    properties:
                      resource_id:
                        type: integer
                        format: int64
                        example: 1

      responses:
        201:
          description: Successful registration of a new ensemble
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ensemble"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /runtimes/{id}:
    get:
      description: Return details about a runtime
      operationId: getRuntime
      security:
        - bearerAuth: []
      tags:
        - runtimes
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a runtime
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Runtime"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      description: Updates a runtime
      operationId: updateRuntime
      security:
        - bearerAuth: []
      tags:
        - runtimes
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                template_path:
                  type: string
                  maxLength: 2048
                  example: ./faas/python/cloud_function.py
      responses:
        204:
          description: Successful update of a resource type
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a runtime
      operationId: deleteRuntime
      security:
        - bearerAuth: []
      tags:
        - runtimes
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a runtime
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /runtimes/{id}/template:
    get:
      description: Return the template code for a selected runtime
      operationId: getRuntimeTemplate
      security:
        - bearerAuth: []
      tags:
        - runtimes
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a runtime template
          content:
            application/json:
              schema:
                type: object
                minProperties: 1
                additionalProperties: false
                properties:
                  template:
                    type: string
                    example: |
                      def main(json_input):
                        input1 = json_input["input1"]
                        res = {
                            "input1": input1
                        }
                        return res
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /runtimes:
    get:
      description: Return details about all runtimes managed by the resource manager
      operationId: listRuntimes
      security:
        - bearerAuth: []
      tags:
        - runtimes
      responses:
        200:
          description: Successful pull of all runtimes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Runtime"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new runtime
      operationId: createRuntime
      security:
        - bearerAuth: []
      tags:
        - runtimes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              additionalProperties: false
              properties:
                name:
                  type: string
                  minLength: 8
                  maxLength: 512
                  example: Python 3.9
                template_path:
                  type: string
                  minLength: 1
                  maxLength: 2048
                  example: ./faas/python/cloud_function.py
      responses:
        201:
          description: Successful creation of a new runtime
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Runtime"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /functions/{id}:
    get:
      description: Return details about a function
      operationId: getFunction
      security:
        - bearerAuth: []
      tags:
        - functions
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a function
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Function"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      description: Updates a function
      operationId: updateFunction
      security:
        - bearerAuth: []
      tags:
        - resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 64
                  example: "Multiply"
                runtime:
                  type: object
                  required:
                    - runtime_id
                  additionalProperties: false
                  properties:
                    runtime_id:
                      type: integer
                      format: int64
                      example: 1
                code:
                  type: string
                  example: |
                    def main(json_input):
                      input1 = json_input["input1"]
                      res = {
                          "input1": input1
                      }
                      return res
      responses:
        204:
          description: Successful update of a resource
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a function
      operationId: deleteFunction
      security:
        - bearerAuth: []
      tags:
        - functions
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a function
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /functions:
    get:
      description: Return details about all functions managed by the resource manager
      operationId: listFunctions
      security:
        - bearerAuth: []
      tags:
        - functions
      responses:
        200:
          description: Successful pull of all functions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Function"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new function
      operationId: createFunction
      security:
        - bearerAuth: []
      tags:
        - functions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - runtime
                - code
              additionalProperties: false
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 64
                  example: "Multiply"
                runtime:
                  type: object
                  required:
                    - runtime_id
                  additionalProperties: false
                  properties:
                    runtime_id:
                      type: integer
                      format: int64
                      example: 1
                code:
                  type: string
                  minLength: 1
                  maxLength: 2048
                  example: |
                    def main(json_input):
                      input1 = json_input["input1"]
                      res = {
                          "input1": input1
                      }
                      return res
      responses:
        201:
          description: Successful creation of a new resource provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceProvider"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /functions/{id}/resources:
    get:
      description: Return all resources that are linked to an existing function
      operationId: listFunctionResources
      security:
        - bearerAuth: []
      tags:
        - functions/resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of all resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Adds multiple resources to an existing function
      operationId: addFunctionResources
      security:
        - bearerAuth: []
      tags:
        - functions/resources
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                type: object
                required:
                  - resource_id
                additionalProperties: false
                properties:
                  resource_id:
                    type: integer
                    format: int64
                    example: 1
      responses:
        204:
          description: Successfully added resources to an existing function
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /functions/{functionId}/resources/{resourceId}:
    delete:
      description: Deletes a function resource
      operationId: deleteFunctionResource
      security:
        - bearerAuth: []
      tags:
        - functions/resources
      parameters:
        - name: functionId
          in: path
          description: ID of the function entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: resourceId
          in: path
          description: ID of the resources entity
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        204:
          description: Successful deletion of a metric
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /reservations:
    get:
      description: Return details about the user's reservations
      operationId: listMyReservations
      security:
        - bearerAuth: []
      tags:
        - reservations
      responses:
        200:
          description: Successful pull of all reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        500:
          $ref: "#/components/responses/500"


    post:
      description: Reserves resources and deploys undeployed ones if wanted
      operationId: reserveResources
      security:
        - bearerAuth: []
      tags:
        - reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - function_resources
                - service_resources
              additionalProperties: false
              properties:
                service_resources:
                  type: array
                  items:
                    type: object
                    required:
                      - service_id
                      - resource_id
                      - namespace
                      - context
                    additionalProperties: false
                    properties:
                      service_id:
                        type: integer
                        format: int64
                        example: 1
                      resource_id:
                        type: integer
                        format: int64
                        example: 1
                      namespace:
                        type: string
                        example: default
                      context:
                        type: string
                        example: default
                function_resources:
                  type: array
                  items:
                    type: object
                    required:
                      - function_id
                      - resource_id
                    additionalProperties: false
                    properties:
                      function_id:
                        type: integer
                        format: int64
                        example: 1
                      resource_id:
                        type: integer
                        format: int64
                        example: 1
                docker_credentials:
                  type: object
                  required:
                    - username
                    - access_token
                  additionalProperties: false
                  properties:
                    username:
                      description: the username of the docker registry
                      type: string
                      example: user1
                    access_token:
                      description: preferrably an access token or if not available the password for the docker registry
                      type: string
                      example: abcdef1234
                kube_config:
                  description: the kube config to use for the resource deploymnt. It should contain
                  type: string
                  example: |
                    apiVersion: v1
                    clusters:
                    - cluster:
                        certificate-authority-data: <authority-certificate>
                        server: <cluster-ip>
                      name: <cluster-name>
                    contexts:
                    - context:
                        cluster: <cluster-name>
                        user: <user-name>
                      name: <context-name>
                    kind: Config
                    preferences: {}
                    users:
                    - name: <user-name>
                      user:
                        client-certificate-data: <client-certificate-data>
                        client-key-data: <client-key-data>     

      responses:
        200:
          description: Successful reservation of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /reservations/{id}:
    get:
      description: Return details about a resource reservation
      operationId: getReservation
      security:
        - bearerAuth: []
      tags:
        - reservations
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"


  /reservations/{id}/logs:
    get:
      description: Return all logs linked to a reservation
      operationId: listReservationLogs
      security:
        - bearerAuth: []
      tags:
        - reservations
        - logs
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of all logs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /reservations/{id}/cancel:
    patch:
      description: Terminates reserved resources.
      operationId: cancelReservation
      security:
        - bearerAuth: []
      tags:
        - reservations
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful cancellation of a reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /resource-providers/{id}:
    get:
      description: Return details about a resource provider
      operationId: getResourceProvider
      security:
        - bearerAuth: []
      tags:
        - resourceProviders
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a resource provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceProvider"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a resource provider
      operationId: deleteResourceProvider
      security:
        - bearerAuth: []
      tags:
        - resourceProviders
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a resource provider
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /resource-providers/{id}/regions:
    get:
      description: Return details about all registerd resource provider's regions
      operationId: listResourceProviderRegions
      security:
        - bearerAuth: []
      tags:
        - resourceProviders
        - regions
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of all resource provider's regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Region"
        500:
          $ref: "#/components/responses/500"

  /resource-providers:
    get:
      description: Return details about all resource providers managed by the resource manager
      operationId: listResourceProviders
      security:
        - bearerAuth: []
      tags:
        - resourceProviders
      responses:
        200:
          description: Successful pull of all resource providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceProvider"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new resource provider
      operationId: createResourceProvider
      security:
        - bearerAuth: []
      tags:
        - resourceProviders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
              additionalProperties: false
              properties:
                provider:
                  type: string
                  minLength: 3
                  maxLength: 8
                  example: aws
      responses:
        201:
          description: Successful creation of a new resource provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceProvider"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /credentials/{id}:
    delete:
      description: Deletes credentials from user account
      operationId: deleteCredentials
      security:
        - bearerAuth: []
      tags:
        - credentials
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of credentials
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /regions/{id}:
    get:
      description: Return details about a region managed by the resource manager
      operationId: getRegion
      security:
        - bearerAuth: []
      tags:
        - regions
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a region
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Region"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a region
      operationId: deleteRegion
      security:
        - bearerAuth: []
      tags:
        - regions
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a region
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /regions:
    get:
      description: Return details about all regions managed by the resource manager
      operationId: listRegions
      security:
        - bearerAuth: []
      tags:
        - regions
      responses:
        200:
          description: Successful pull of all regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Region"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new region
      operationId: createRegion
      security:
        - bearerAuth: []
      tags:
        - regions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - resource_provider
              additionalProperties: false
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 512
                  example: us-east
                resource_provider:
                  type: object
                  required:
                    - provider_id
                  additionalProperties: false
                  properties:
                    provider_id:
                      type: integer
                      format: int64
                      example: 1
      responses:
        201:
          description: Successful creation of a new region
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Region"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /vpcs:
    get:
      description: Returns all virtual private clouds registered for the current user account
      operationId: listVPCs
      security:
        - bearerAuth: []
      tags:
        - vpcs
      responses:
        200:
          description: Successful pull of the vpcs registered for the current user account
          content:
            application/json:
              schema:
                type: object
                properties:
                  vpc_id:
                    type: integer
                    format: int64
                    example: 1
                  vpc_id_value:
                    type: string
                    example: vpc-ave2412
                  subnet_id_value:
                    type: string
                    example: subnet-ave2412
                  region:
                    $ref: "#/components/schemas/Region"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new vpc linked to a region and current user account
      operationId: createVPC
      security:
        - bearerAuth: []
      tags:
        - vpcs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vpc_id_value
                - subnet_id_value
                - region
              additionalProperties: false
              properties:
                vpc_id_value:
                  type: string
                  example: vpc-ave2412
                subnet_id_value:
                  type: string
                  example: subnet-ave2412
                region:
                  type: object
                  required:
                    - region_id
                  additionalProperties: false
                  properties:
                    region_id:
                      type: integer
                      format: int64
                      example: 1
      responses:
        200:
          description: Successful creation of the vpc
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPC"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /vpcs/{id}:
    get:
      description: Return details about a virtual private clouds registered at the the resource manager
      operationId: getVPC
      security:
        - bearerAuth: []
      tags:
        - vpcs
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a vpc
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPC"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a vpc
      operationId: deleteVPC
      security:
        - bearerAuth: []
      tags:
        - vpcs
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a vpc
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /credentials:
    get:
      description: Returns all cloud credentials linked to the current user account
      operationId: listCredentials
      security:
        - bearerAuth: []
      tags:
        - credentials
      responses:
        200:
          description: Successful pull of all cloud credentials linked to the current user account
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    credentials_id:
                      type: integer
                      format: int64
                      example: 1
                    resource_provider:
                      $ref: "#/components/schemas/ResourceProvider"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Add new cloud credentials the current user account
      operationId: addCredentials
      security:
        - bearerAuth: []
      tags:
        - credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - access_key
                - resource_provider
              additionalProperties: false
              properties:
                access_key:
                  type: string
                  example: accesskey1234
                secret_access_key:
                  type: string
                  example: secretaccesskey1234
                session_token:
                  type: string
                  example: sessiontoken1234
                resource_provider:
                  type: object
                  required:
                    - provider_id
                  additionalProperties: false
                  properties:
                    provider_id:
                      type: integer
                      format: int64
                      example: 1
      responses:
        201:
          description: Successful creation of new cloud credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  credentials_id:
                    type: integer
                    format: int64
                    example: 1
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /resource-types/{id}:
    get:
      description: Return details about a resource type managed by the resource manager
      operationId: getResourceType
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a resource type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceType"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      description: Updates a resource type
      operationId: updateResourceType
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                resource_type:
                  type: string
                  minLength: 1
                  maxLength: 8
                  example: faas
      responses:
        204:
          description: Successful update of a resource type
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a resource type
      operationId: deleteResourceType
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a resource type
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /resource-types:
    get:
      description: Return details about all resource types managed by the resource manager
      operationId: listResourceTypes
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
      responses:
        200:
          description: Successful pull of all resource types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceType"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new resource type
      operationId: createResourceType
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resource_type
              additionalProperties: false
              properties:
                resource_type:
                  type: string
                  minLength: 1
                  maxLength: 8
                  example: faas
      responses:
        201:
          description: Successful creation of a new resource type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceType"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /resource-types/{id}/metrics:
    get:
      description: Returns all metrics that are available for the selected resource type
      operationId: listResourceTypeMetrics
      security:
        - bearerAuth: []
      tags:
        - resourceTypes
        - metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of all metrics for the selected resource type
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    metric:
                      $ref: "#/components/schemas/Metric"
                    required:
                      type: boolean
                      example: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"



  /metrics/{id}:
    get:
      description: Return details about a metric managed by the resource manager
      operationId: getMetric
      security:
        - bearerAuth: []
      tags:
        - metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a metric
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      description: Updates a metric
      operationId: updateMetric
      security:
        - bearerAuth: []
      tags:
        - metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                metric:
                  type: string
                  minLength: 1
                  maxLength: 256
                  example: availability
                description:
                  type: string
                  minLength: 1
                  maxLength: 512
                  example: the availability of a resource
      responses:
        204:
          description: Successful update of a metric
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a metric
      operationId: deleteMetric
      security:
        - bearerAuth: []
      tags:
        - metrics
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a metric
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /metrics:
    get:
      description: Return details about all metrics managed by the resource manager
      operationId: listMetrics
      security:
        - bearerAuth: []
      tags:
        - metrics
      responses:
        200:
          description: Successful pull of all metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Metric"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new metric
      operationId: createMetric
      security:
        - bearerAuth: []
      tags:
        - metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - metric
                - description
                - is_monitored
                - metric_type
              additionalProperties: false
              properties:
                metric:
                  type: string
                  minLength: 1
                  maxLength: 256
                  example: availability
                is_monitored:
                  description: Whether the values are filled by the RM or by the client
                  type: boolean
                  example: true
                description:
                  type: string
                  minLength: 1
                  maxLength: 512
                  example: the availability of a resource
                metric_type:
                  type: object
                  required:
                    - metric_type_id
                  additionalProperties: false
                  properties:
                    metric_type_id:
                      type: integer
                      format: int64
                      example: 1

      responses:
        201:
          description: Successful creation of a new metric
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

  /services/{id}:
    get:
      description: Return details about a service managed by the resource manager
      operationId: getService
      security:
        - bearerAuth: []
      tags:
        - services
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful pull of a service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      description: Deletes a service
      operationId: deleteService
      security:
        - bearerAuth: []
      tags:
        - service
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Successful deletion of a service
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /services:
    get:
      description: Return details about all services managed by the resource manager
      operationId: listServices
      security:
        - bearerAuth: []
      tags:
        - services
      responses:
        200:
          description: Successful pull of all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
        500:
          $ref: "#/components/responses/500"

    post:
      description: Creates a new service
      operationId: createService
      security:
        - bearerAuth: []
      tags:
        - sertvices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              additionalProperties: false
              properties:
                name:
                  description: the name of the docker image
                  type: string
                  minLength: 1
                  maxLength: 4096
                  example: user/example

      responses:
        201:
          description: Successful creation of a new service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    Account:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        is_active:
          type: boolean
          example: true
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    ResourceProvider:
      type: object
      properties:
        provider_id:
          type: integer
          format: int64
          example: 1
        provider:
          type: string
          example: aws
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Region:
      type: object
      properties:
        region_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: us-east
        resource_provider:
          $ref: "#/components/schemas/Runtime"
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Resource:
      type: object
      properties:
        resource_id:
          type: integer
          format: int64
          example: 1
        resource_type:
          $ref: "#/components/schemas/ResourceType"
        is_self_managed:
          type: boolean
          example: true
        region:
          $ref: "#/components/schemas/Region"
        created_at:
          type: integer
          format: int64
          example: 1679496667103
        updated_at:
          type: integer
          format: int64
          example: 1679496667103

    Ensemble:
      type: object
      properties:
        ensemble_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        slos:
          $ref: "#/components/schemas/Slos"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        created_at:
          type: integer
          format: int64
          example: 1679496667103
        updated_at:
          type: integer
          format: int64
          example: 1679496667103

    ResourceType:
      type: object
      properties:
        type_id:
          type: integer
          format: int64
          example: 1
        resource_type:
          type: string
          maxLength: 8
          example: faas
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Metric:
      type: object
      properties:
        metric_id:
          type: integer
          format: int64
          example: 1
        metric:
          type: string
          example: availability
        is_monitored:
          type: boolean
          example: false
        metricType:
          type: object
          properties:
            metric_type_id:
              type: integer
              format: int64
              example: 1
            type:
              type: string
              example: number
        description:
          type: string
          example: the availability of a resource
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Reservation:
      type: object
      properties:
        reservation_id:
          type: integer
          format: int64
          example: 1
        is_active:
          type: boolean
          example: true
        resource_reservations:
          type: array
          items:
            $ref: "#/components/schemas/ResourceReservation"
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    ResourceReservation:
      type: object
      properties:
        resource_reservation_id:
          type: integer
          format: int64
          example: 1
        reservation:
          $ref: "#/components/schemas/Reservation"
        resource:
          $ref: "#/components/schemas/Resource"
        is_deployed:
          type: boolean
          example: true
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Function:
      type: object
      properties:
        function_id:
          type: integer
          format: int64
          example: 1
        runtime:
          $ref: "#/components/schemas/Runtime"
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Runtime:
      type: object
      properties:
        runtime_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        template_path:
          type: string
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Service:
      type: object
      properties:
        service_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: user/example
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    VPC:
      type: object
      properties:
        vpc_id:
          type: integer
          format: int64
          example: 1
        vpc_id_value:
          type: string
          example: vpc-ave2412
        subnet_id_value:
          type: string
          example: subnet-ave2412
        created_at:
          type: integer
          format: int64
          example: 1679496667103
        region:
          $ref: "#/components/schemas/Region"
    Log:
      type: object
      properties:
        log_id:
          type: integer
          format: int64
          example: 1
        log_value:
          type: string
          example: resource was deployed
        subnet_id_value:
          type: string
          example: subnet-ave2412
        created_at:
          type: integer
          format: int64
          example: 1679496667103
    Url:
      type: string
      minLength: 1
      maxLength: 512
      pattern: "^((https?://)(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:]])?$"
      example: https://123456789.execute-api.eu-west-1.amazonaws.com/Shift
    Error:
      type: string
      example: internal server error

    stringValues:
      type: array
      minItems: 1
      items:
        type: string
        example: 'ubuntu'
        minLength: 1

    numberValues:
      type: array
      minItems: 1
      items:
        type: number
        example: 2.5

    boolValues:
      type: array
      minItems: 1
      items:
        type: boolean
        example: false

    Slos:
      description: Filters all resources by the given Service Level Objectives
      type: array
      minItems: 1
      items:
        type: object
        required:
          - name
          - expression
          - value
        additionalProperties: false
        properties:
          name:
            type: string
            minLength: 1
            maxLength: 256
            example: "availability"
          expression:
            description: Valid expressions are >, <, ==
            type: string
            minLength: 1
            maxLength: 2
            example: ">"
          value:
            oneOf:
              - $ref: '#/components/schemas/stringValues'
              - $ref: '#/components/schemas/numberValues'
              - $ref: '#/components/schemas/boolValues'

  parameters:
    idParam:
      name: id
      in: path
      description: ID of the entity
      required: true
      schema:
        type: integer
        format: int64
        example: 1

  responses:
    400:
      description: Bad input
      content:
        "*/*":
          schema:
            type: string
            example: bad input
    403:
      description: Forbidden
      content:
        "*/*":
          schema:
            type: string
            example: forbidden
    404:
      description: Not found
      content:
        "*/*":
          schema:
            type: string
            example: not found
    409:
      description: Already exists
      content:
        "*/*":
          schema:
            type: string
            example: already exists
    500:
      description: Internal server error
      content:
        "*/*":
          schema:
            type: string
            example: internal server error
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
