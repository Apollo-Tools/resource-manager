CREATE TABLE platform_metric (
    platform_metric_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    platform_id BIGINT NOT NULL,
    metric_id BIGINT NOT NULL,
   FOREIGN KEY (platform_id)
       REFERENCES platform (platform_id) ON DELETE CASCADE,
   FOREIGN KEY (metric_id)
       REFERENCES metric (metric_id) ON DELETE CASCADE,
    required BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    UNIQUE (platform_id, metric_id)
);

-- lambda
INSERT INTO platform_metric (platform_id, metric_id, required)
VALUES ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'availability'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cost'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'latency'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'memory-size'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'online'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'timeout'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'lambda'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'time-to-live'),
        false);
-- ec2
INSERT INTO platform_metric (platform_id, metric_id, required)
VALUES ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'availability'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cost'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cpu'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'latency'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'memory-size'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'online'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'timeout'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'ec2'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'time-to-live'),
        false);
-- openfaas
INSERT INTO platform_metric (platform_id, metric_id, required)
VALUES ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'availability'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cost'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cpu'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'latency'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'memory-size'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'online'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'timeout'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'openfaas'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'time-to-live'),
        false);
-- k8s
INSERT INTO platform_metric (platform_id, metric_id, required)
VALUES ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'availability'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cluster-url'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cost'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'cpu'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'external-ip'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'latency'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'memory-size'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'online'),
        false),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'pre-pull-timeout'),
        true),
       ((SELECT platform_id FROM platform p WHERE p.platform = 'k8s'),
        (SELECT metric_id FROM metric m WHERE m.metric = 'time-to-live'),
        false);

DROP TABLE resource_type_metric;
