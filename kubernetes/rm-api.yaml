# This file is responsible for the deployment of the RM backend.
# The deployment is split into a service of type LoadBalancer to enable
# external access to the api and a deployment that defines the container and volume mounts.
apiVersion: v1
kind: Service
metadata:
  name: rm-api
spec:
  type: LoadBalancer
  selector:
    app: rm-api
  ports:
    # The external port of the api
    - port: 8888
      targetPort: 8080
  externalIPs:
    # Swap with cluster ip
    - <cluster-IP>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rm-api
spec:
  # The amount of replicas
  replicas: 1
  selector:
    matchLabels:
      app: rm-api
  template:
    metadata:
      labels:
        app: rm-api
    spec:
      containers:
        - name: rm-api
          # Pull latest image
          image: matthigas/rm-api:1.0.7
          imagePullPolicy: Always
          env:
            # The host url of the PostgreSQL database
            - name: db_host
              value: rm-db-service
            # The port of the PostgreSQL database
            - name: db_port
              value: "5433"
            # The login credentials for the db
            - name: db_user
              value: root
            # The password to access the PostgreSQL database
            - name: db_password
              value: root
            # Retry policy for database operations
            - name: max_retries
              value: "5"
            # The time span in milliseconds to wait until a database operation is called again after a serialization error occurred
            - name: retry_delay_millis
              value: "1000"
            # The api port
            - name: api_port
              value: "8080"
            # The path of the build directory
            - name: build_directory
              value: build
            # The path on the host to the build directory
            - name: dind_directory
              value: "var/lib/apollo-rm/"
            # The persistence path for upload files
            - name: upload_persist_directory
              value: "build/upload"
            # The temp path for upload files
            - name: upload_temp_directory
              value: "build/upload/temp"
            # The maximum size of uploaded files in bytes
            - name: max_file_size
              value: "10000000"
            # The secret to use for the JWT
            - name: jwt_secret
              value: "todo-swap-with-real-secret"
            # The time until a newly created token expires
            - name: token_minutes_valid
              value: "10080"
            # The time period between each validation performed on all existing ensembles in minutes
            - name: ensemble_validation_period
              value: "60"
            # The insecure registries that are accessed for openfaas and ec2 deployments
            - name: docker_insecure_registries
              value: "[]"
            # The k8s secrets that contain the kubeconfigs for all monitored k8s resources
            - name: kube_config_secrets_name
              value: "rm-kubeconfigs"
            # The namespace where the kube config secrets are stored
            - name: kube_config_secrets_namespace
              value: "default"
            # The path of the directory where the kube configs to access registered k8s resources are stored
            - name: kube_config_directory
              value: "k8s/kubeconfigs"
            # The timeout of k8s api requests in seconds
            - name: kube_api_timeout_seconds
              value: "10"
            # The secrets that contain credentials to private repositories
            - name: kube_image_pull_secrets
              value: "[\"regcred\"]"
            # The push url of the external monitoring system (VictoriaMetrics)
            - name: monitoring_push_url
              value: "http://rm-monitoring-vm:8890"
            # The query url of the external monitoring system (VictoriaMetrics)
            - name: monitoring_query_url
              value: "http://rm-monitoring-vm:8889"
            # The number of echo requests to send per latency test
            - name: latency_monitoring_count
              value: "2"
            # The time period between each monitoring update for all registered k8s resources in seconds
            - name: kube_monitoring_period
              value: "5"
            # The time period between each monitoring update for all registered OpenFaaS resources in minutes
            - name: openfaas_monitoring_period
              value: "5"
            # The time period between each monitoring update for all registered regions in minutes
            - name: region_monitoring_period
              value: "5"
            # The time period between each monitoring update the aws price list api in minutes
            - name: aws_price_monitoring_period
              value: "86400"
            # The time period between file clean ups of failed deployments.
            - name: file_cleanup_period
              value: "86400"

          resources:
            # The resource limits
            limits:
              memory: "1000Mi"
              cpu: "1.5"
          ports:
            # The internal port of the api, must match api_port env variable
            - containerPort: 8080
          securityContext:
            # Necessary for docker-in-docker
            privileged: true
          volumeMounts:
            # The volume where all build data (terraform files, files to build images) is stored
            - name: rm-api-storage
              mountPath: /build
            # The volume where k8s configs are stored
            - name: rm-k8s-storage
              mountPath: /k8s
            # The path to the docker.sock used by docker-in-docker
            - name: dind-storage
              mountPath: /var/run/docker.sock
      volumes:
        - name: dind-storage
          hostPath:
            path: /var/run/docker.sock
        - name: rm-api-storage
          hostPath:
            path: /var/lib/apollo-rm/build
        - name: rm-k8s-storage
          emptyDir:
            sizeLimit: 100Mi
      # Define service account with cluster role binding
      serviceAccountName: <service-account>
